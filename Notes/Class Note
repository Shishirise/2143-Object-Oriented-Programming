// Stack implimentation 

#include <iostream>
using namespace std;

class Stack {
private:
    int top;
    int size;
    int* array;

public:
    // Constructor to initialize stack with given size
    Stack(int maxSize) {
        size = maxSize;
        array = new int[size];
        top = -1;
    }

    // Destructor to free dynamically allocated memory
    ~Stack() {
        delete[] array;
    }

    // Push an element onto the stack
    void push(int value) {
        if (top == size - 1) {
            cout << "Stack overflow! Cannot push " << value << endl;
        } else {
            array[++top] = value;    //PTN
            cout << value << " pushed to stack" << endl;
        }
    }

    // Pop an element from the stack
    int pop() {
        if (top == -1) {
            cout << "Stack underflow! Cannot pop element" << endl;
            return -1; // Indicating stack is empty
        } else {
            return array[top--];   //PTN
        }
    }

    // Peek the top element of the stack
    int peek() {
        if (top == -1) {
            cout << "Stack is empty" << endl;
            return -1;
        } else {
            return array[top];
        }
    }

    // Check if the stack is empty
    bool isEmpty() {
        return top == -1;
    }

    // Check if the stack is full
    bool isFull() {
        return top == size - 1;
    }
};

int main() {
    Stack stack(5);  // Creating a stack with max size 5

    stack.push(10);
    stack.push(20);
    stack.push(30);
    
    cout << "Top element is: " << stack.peek() << endl;

    stack.pop();
    cout << "Top element after pop: " << stack.peek() << endl;

    return 0;
}
