
#include <iostream>
using namespace std;

struct Node {
    int key;
    Node *left, *right;

    Node(int value) {
        key = value;
        left = right = nullptr;
    }
};

// Function to insert a node in BST
Node* insert(Node* root, int key) {
    if (!root) return new Node(key);
    if (key < root->key)
        root->left = insert(root->left, key);
    else
        root->right = insert(root->right, key);
    return root;
}

// Function to find the minimum node in a subtree
Node* findMin(Node* root) {
    while (root->left) root = root->left;
    return root;
}

// Function to delete a node from BST
Node* deleteNode(Node* root, int key) {
    if (!root) return root; // Base case: empty tree

    if (key < root->key)
        root->left = deleteNode(root->left, key);
    else if (key > root->key)
        root->right = deleteNode(root->right, key);
    else {
        // Case 1: No child or one child
        if (!root->left) {
            Node* temp = root->right;
            delete root;
            return temp;
        } else if (!root->right) {
            Node* temp = root->left;
            delete root;
            return temp;
        }

        // Case 2: Two children, find in-order successor (smallest in right subtree)
        Node* temp = findMin(root->right);
        root->key = temp->key; // Copy successor's value
        root->right = deleteNode(root->right, temp->key); // Delete successor
    }
    return root;
}

// Function to perform in-order traversal (sorted order)
void inorder(Node* root) {
    if (root) {
        inorder(root->left);
        cout << root->key << " ";
        inorder(root->right);
    }
}

int main() {
    Node* root = nullptr;
    root = insert(root, 50);
    root = insert(root, 30);
    root = insert(root, 70);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 60);
    root = insert(root, 80);

    cout << "BST before deletion:\n";
    inorder(root);
    cout << "\n";

    root = deleteNode(root, 50); // Deleting node with two children

    cout << "BST after deleting 50:\n";
    inorder(root);
    cout << "\n";

    return 0;
}
